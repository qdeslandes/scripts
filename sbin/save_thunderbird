#!/usr/bin/env python3

'''
save_thunderbird - Backup Thunderbird's application and configuration files to
prevent Chef to remove them.

During my local Chef run, a specific cookbook is responsible for killing
and removing Thunderbird application, and its configuration. This is an issue
as it shouldn't behave this way on my laptop, for a lot of reasons.

Instead of fixing the cookbook, which I can't do, I'll work around it.

This works exclusively on MacOS.
'''

import argparse
import os
import pathlib
import plistlib
import subprocess
import sys
import time

def error(msg: str) -> None:
    '''Print an error message.

    Prefixes the messages with '[-]' to imply the failure.

    Args:
        msg: str
            Message to print.
    '''

    print(f'\x1b[31m\033[1m[-]\x1b[0m {msg}')

def success(msg: str) -> None:
    '''Print a success message.

    Prefixes the messages with '[+]' to imply the success.

    Args:
        msg: str
            Message to print.
    '''

    print(f'\x1b[32m\033[1m[+]\x1b[0m {msg}')

def get_services_status(domain: str = 'system'):
    '''Fetch the list of services and their status.
    '''

    process = subprocess.run(['launchctl', 'print-disabled', domain],
                             check=True, stdout=subprocess.PIPE)

    services = {}
    raw = process.stdout.decode('utf-8').split('\n')
    for rawline in raw:
        if not '=>' in rawline:
            continue

        components = rawline.strip().split(' ')
        name = components[0][1:-1]
        state = components[2]
        services[name] = True if state == 'enabled' else False

    return services

class Chef:
    '''Chef object for convenience methods.
    '''

    CRON_OVERRIDE_PATH = pathlib.Path('/var/chef/cron.default.override')
    LAUNCHCTL_SERVICE_PLIST = pathlib.Path('/Library/LaunchDaemons/com.chef.soloctl.plist')
    LAUNCHD_SOLOCTL_BIN_PATH = pathlib.Path('/usr/local/bin/launchd_soloctl.sh')
    LAUNCHD_SOLOCT_BIN_OVERRIDE = b'#!/bin/bash\ntrue\n'

    def run(self) -> None:
        '''Run soloctl and wait for completion.
        '''

        subprocess.run(['soloctl', '-i'], check=True, capture_output=True)

    def _service_reload(self) -> None:
        '''Reload the service.

        Emulate launchctl's reload command using unload and reload.
        '''

        subprocess.run(['launchctl', 'unload', Chef.LAUNCHCTL_SERVICE_PLIST.as_posix()],
                       check=True, capture_output=True)
        subprocess.run(['launchctl', 'load', Chef.LAUNCHCTL_SERVICE_PLIST.as_posix()],
                       check=True, capture_output=True)

    def disable(self) -> None:
        '''Disable Chef service.

        Modify the service's .plist file to ensure `RunAtLoad` is disabled,
        and modify the wrapper used by the service to a no-op.
        '''

        with open(Chef.LAUNCHD_SOLOCTL_BIN_PATH, 'wb') as launchd_soloctl:
            launchd_soloctl.write(Chef.LAUNCHD_SOLOCT_BIN_OVERRIDE)

        data = self._service_plist
        data['RunAtLoad'] = False
        self._service_plist = data
        self._service_reload()

    @property
    def _service_plist(self):
        '''Get the service's .plist file.

        Returns:
            Dictionnary with the .plist file data.
        '''

        with open(Chef.LAUNCHCTL_SERVICE_PLIST, 'rb') as plist:
            return plistlib.load(plist, fmt=plistlib.PlistFormat.FMT_XML)

    @_service_plist.setter
    def _service_plist(self, data) -> None:
        '''Set the service's .plist file.

        Args:
            data
                Content of the .plist file, as used by plistlib.
        '''

        with open(Chef.LAUNCHCTL_SERVICE_PLIST, 'wb') as plist:
            plistlib.dump(data, plist, fmt=plistlib.PlistFormat.FMT_XML)

    @property
    def is_running(self) -> bool:
        '''Check if soloctl is currently running.

        Returns:
            True if Chef is running, False otherwise.
        '''

        return not subprocess.run(['pgrep', '-f', 'soloctl'], check=False)

    @property
    def will_run_with_launchd_soloctl(self) -> bool:
        '''Check whether soloctl will run, eventually.

        Check the content of the wrapper run by com.chef.soloctl to ensure
        it's a no-op.

        Returns:
            True if soloctl will run, False otherwise.
        '''

        with open(Chef.LAUNCHD_SOLOCTL_BIN_PATH, 'rb') as launchd_soloctl:
            return len(launchd_soloctl.readlines()) != 2

    @property
    def will_run_at_boot(self) -> bool:
        '''Check whether com.chef.soloctl will run at boot.

        Check the service's RunAtLoad attribute to find if it will run
        at boot.

        Returns:
            True if the service will run at boot, False otherwise.
        '''

        return self._service_plist['RunAtLoad']

class Thunderbird:
    '''Thunderbird object for convenience methods.
    '''

    APP_PATH = pathlib.Path('/Applications/Thunderbird.app')
    CONFIG_PATH = pathlib.Path('/Users/qdeslandes/Library/Thunderbird')

    def __init__(self) -> None:
        if not Thunderbird.APP_PATH.exists():
            raise RuntimeError(f'{Thunderbird.APP_PATH} doesn\'t exists!')
        if not Thunderbird.CONFIG_PATH.exists():
            raise RuntimeError(f'{Thunderbird.CONFIG_PATH} doesn\'t exists!')

    def start(self) -> None:
        '''Start Thunderbird.
        '''

        subprocess.run(['open', '/Applications/Thunderbird.app'], check=True)

    def stop(self) -> None:
        '''Stop Thunderbird.
        '''

        subprocess.run(['osascript', '-e', 'quit app "Thunderbird"'],
                       check=True, capture_output=True)

        # Ensure Thunderbird is closed before we continue, otherwise it will
        # create a new ~/Library/Thunderbird folder.
        time.sleep(1)

    def backup(self) -> None:
        '''Backup Thunderbird's app and data.
        '''

        os.rename(
            Thunderbird.APP_PATH.as_posix(),
            Thunderbird.APP_PATH.as_posix() + '.bak'
        )

        os.rename(
            Thunderbird.CONFIG_PATH.as_posix(),
            Thunderbird.CONFIG_PATH.as_posix() + '.bak'
        )

    def restore(self) -> None:
        '''Restore Thunderbird's app and data.
        '''

        os.rename(
            Thunderbird.APP_PATH.as_posix() + '.bak',
            Thunderbird.APP_PATH.as_posix()
        )

        os.rename(
            Thunderbird.CONFIG_PATH.as_posix() + '.bak',
            Thunderbird.CONFIG_PATH.as_posix()
        )

def run_check(chef: Chef, thunderbird: Thunderbird) -> None:
    '''Run check regarding the system's state.

    This function should not be used as a requirement check. It's designed to
    verify whether the system is configured properly to avoid losing
    Thunderbird's configuration.

    Args:
        chef: Chef
            Chef object.
        thunderbird: Thunderbird
            Thunderbird object.
    '''

    if sys.platform == 'darwin':
        success('System is MacOS compatible')
    else:
        error('System is not MacOS compatible')

    if chef.will_run_with_launchd_soloctl:
        error(f'Chef will run eventually: \'{Chef.LAUNCHD_SOLOCTL_BIN_PATH}\' ' \
              'has not been modified')
    else:
        success(f'Chef won\'t run: \'{Chef.LAUNCHD_SOLOCTL_BIN_PATH}\' has been modified')

    if chef.will_run_at_boot:
        error('Chef will run at boot: \'RunAtLoad\' is enabled for \'com.chef.soloctl\'')
    else:
        success('Chef won\'t run at boot: \'RunAtLoad\' is disabled for \'com.chef.soloctl\'')

    if thunderbird.APP_PATH.exists():
        success('Thunderbird is installed')
    else:
        error('Thunderbird is not installed')

    if thunderbird.CONFIG_PATH.exists():
        success('Thunderbird is configured')
    else:
        error('Thunderbird is not configured')

def main() -> None:
    '''Main function.
    '''

    parser = argparse.ArgumentParser(description='Workaround Chef\'s Thunderbird removal.')
    parser.add_argument('-c', '--check', action='store_true',
                        help='Check system state, do not perform any modification.')
    parser.add_argument('-s', '--start', action='store_true',
                        help='Start Thunderbird once run is complete.')
    args = parser.parse_args()

    chef = Chef()
    thunderbird = Thunderbird()

    if args.check:
        run_check(chef, thunderbird)
        return

    if chef.is_running:
        raise RuntimeError('Chef is not supposed to be running...')

    success('Stopping and backing-up Thunderbird...')
    thunderbird.stop()
    thunderbird.backup()

    success('Running Chef...')
    chef.run()
    chef.disable()

    success('Restoring Thunderbird configuration...')
    thunderbird.restore()

    if args.start:
        success('Starting Thunderbird back!')
        thunderbird.start()

if __name__ == '__main__':
    main()
